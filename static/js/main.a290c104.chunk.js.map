{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Alert","props","elevation","variant","sendInstructions","forward","backward","left","right","stop","setError","a","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","catch","error","console","App","React","useState","open","setOpen","className","Typography","gutterBottom","style","marginBottom","Grid","container","direction","justify","alignItems","item","xs","IconButton","color","aria-label","component","onClick","Snackbar","autoHideDuration","onClose","severity","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a290c104.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Typography from '@material-ui/core/Typography';\n\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nasync function sendInstructions(forward, backward, left, right, stop, setError)\n{\n    const response = await fetch('http://192.168.4.1/data/?sensor_reading={\"forward\":\"'+forward+'\",'+'\"backward\":\"'+backward+'\",\"left\":\"'+left+'\",\"right\":\"'+right+'\",\"stop\":\"'+stop+'\"}', {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/html'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    }).catch((error) => {\n      console.error('Error:', error);\n    });\n    if(response!==\"OK\"){\n      setError(true)\n    }\n}\n\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typography variant=\"h5\" gutterBottom style={{marginBottom: \"60px\"}}>\n          Mouse & Cheese\n        </Typography>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={12}>\n            <IconButton color=\"primary\" aria-label=\"forward\" component=\"span\" onClick={() => sendInstructions(1,0,0,0,0,setOpen)}>\n              <KeyboardArrowUpIcon />\n            </IconButton>\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n            xs={12}\n          >\n            <Grid item xs={6}>\n              <IconButton color=\"primary\" aria-label=\"forward\" component=\"span\" onClick={() => sendInstructions(0,0,1,0,0,setOpen)}>\n                <KeyboardArrowLeftIcon />\n              </IconButton>\n            </Grid>\n            <Grid item xs={6}>\n              <IconButton color=\"primary\" aria-label=\"forward\" component=\"span\" onClick={() => sendInstructions(0,0,0,1,0,setOpen)}>\n                <KeyboardArrowRightIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <IconButton color=\"primary\" aria-label=\"forward\" component=\"span\" onClick={() => sendInstructions(0,1,0,0,0,setOpen)}>\n              <KeyboardArrowDownIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </header>\n      <Snackbar open={open} autoHideDuration={6000} onClose={() => setOpen(false)}>\n        <Alert onClose={() => setOpen(false)} severity=\"error\">\n          Error: please make sure to be connected to the mouse.\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}